directive @verifyUser on FIELD_DEFINITION

scalar Date
scalar Upload

type User {
  id: ID!
  status: Int
  first_name: String
  last_name: String
  phone: String
  image: String
  image_id: Int
  refer: String
  profile_id: Int
  role_id: Int
  font_color: String
  time_zone: String
  time_format: Int
  clock_format: Int
  date_format: Int
  location: String
  sync_code: String
  expire_at: Date
  created_at: Date
  updated_at: Date
  profile: Profile
}

type Image {
  id: ID!
  url: String
  caption: String
  width: Int
  height: Int
  type: Int
  status: Int
  user_id: Int
  created_at: Date
  updated_at: Date

  user: User
}

type Note {
  id: ID!
  message: String
  status: Int
  created_at: Date
  updated_at: Date
  user: User
}

type Calendar {
  id: ID!
  user_id: Int
  title: String
  start_date: Date
  end_date: Date
  status: Int
  created_at: Date
  updated_at: Date
  user: User
}

type Profile {
  id: ID!
  user_id: Int
  timezone: String
  dashboard_code: String
  code: String
  status: Int
  created_at: Date
  updated_at: Date
  user: User
}

type Link {
  id: ID!
  email: String
  user_id: Int
  link: String
  status: Int
  created_at: Date
  updated_at: Date

  user: User
}

type Movie {
  id: ID!
  title: String
  director_id: Int
  main_genre: Int
  status: Int
  actors: [Actor]
  reviews: [Review]
  mainGenre: Genre
  genres: [Genre]
}

type Review {
  id: ID!
  notes: String
  movie_id: Int
}

type Director {
  id: ID!
  name: String
}

type Actor {
  id: ID!
  name: String
}

type Genre {
  id: ID!
  name: String
  movies: [Movie]
}

type MutationResponse {
  success: Boolean!
  message: String
  errors: [ErrorResponse!]
  code: String
}

type ErrorResponse {
  path: String
  message: String
}

type UserResponse {
  success: Boolean!
  data: User
  message: String
  errors: [ErrorResponse!]
  code: String
}
input SyncCalendarInput {
  event_id: String!
  title: String!
  start_date: Date!
  end_date: Date!
}
type AllCalendarEventsResponse {
  success: Boolean!
  data: [Calendar!]
  message: String
  errors: [ErrorResponse!]
  code: String
}
type CustomImageResponse {
  success: Boolean!
  data: Image
  message: String
  errors: [ErrorResponse!]
  code: String
}
type AllNotesResponse {
  success: Boolean!
  data: [Note]
  message: String
  errors: [ErrorResponse!]
  code: String
}
type File {
  id: ID
  filename: String
  mimetype: String
  path: String
}
type FileUploadResponse {
  success: Boolean!
  data: File
  message: String
  errors: [ErrorResponse!]
  code: String
}
type LinkResponse {
  success: Boolean!
  data: Link
  message: String
  errors: [ErrorResponse!]
  code: String
}

type StepsImagesResponse {
  success: Boolean!
  data: [String]
  message: String
  errors: [ErrorResponse!]
  code: String
}

type MovieListResponse {
  success: Boolean!
  data: [Movie]
  message: String
  errors: [ErrorResponse!]
  code: String
}
type DirectorListResponse {
  success: Boolean!
  data: [Director]
  message: String
  errors: [ErrorResponse!]
  code: String
}
type ActorListResponse {
  success: Boolean!
  data: [Actor]
  message: String
  errors: [ErrorResponse!]
  code: String
}
type GenreListResponse {
  success: Boolean!
  data: [Genre]
  message: String
  errors: [ErrorResponse!]
  code: String
}
type UserListResponse {
  success: Boolean!
  data: [User]
  message: String
  errors: [ErrorResponse!]
  code: String
}

type MovieResponse {
  success: Boolean!
  data: Movie
  message: String
  errors: [ErrorResponse!]
  code: String
}
type DirectorResponse {
  success: Boolean!
  data: Director
  message: String
  errors: [ErrorResponse!]
  code: String
}
type ActorResponse {
  success: Boolean!
  data: Actor
  message: String
  errors: [ErrorResponse!]
  code: String
}
type GenreResponse {
  success: Boolean!
  data: Genre
  message: String
  errors: [ErrorResponse!]
  code: String
}

type Query {
  user: UserResponse! @verifyUser

  movie(id: ID): MovieResponse
  director(id: ID): DirectorResponse
  actor(id: ID): ActorResponse
  genre(id: ID): GenreResponse

  getAllNotes: AllNotesResponse! @verifyUser

  getAllCalendarEvents: AllCalendarEventsResponse! @verifyUser

  getCustomImage: CustomImageResponse! @verifyUser

  link: LinkResponse! @verifyUser

  getStepsImages: StepsImagesResponse!

  getMovies: MovieListResponse!
  getUsers: UserListResponse!
  getActors: ActorListResponse!
  getDirectors: DirectorListResponse!
  getGenres: GenreListResponse!
}

type Mutation {
  updateUser(
    sync_code: String
    font_color: String
    time_zone: String
    time_format: Int
    clock_format: Int
    date_format: Int
    location: String
    lat: Float
    lng: Float
  ): MutationResponse! @verifyUser

  addActorToMoviesByGenre(genre_id: ID, actor_id: ID): MutationResponse!

  createNote(message: String!): MutationResponse! @verifyUser
  updateNote(id: ID!, message: String!): MutationResponse! @verifyUser
  deleteNote(id: ID!): MutationResponse! @verifyUser

  createLink(link: String!): MutationResponse! @verifyUser
  deactivateAllLinks: MutationResponse! @verifyUser

  syncCalendar(input: [SyncCalendarInput!]): MutationResponse! @verifyUser
  updateCalendarEvent(
    id: Int!
    title: String!
    start_date: Date!
    end_date: Date!
  ): MutationResponse! @verifyUser
  deleteCalendarEvent(id: Int!): MutationResponse! @verifyUser

  createCustomImage(url: String!): MutationResponse! @verifyUser
  updateCustomImage(id: ID!, url: String!): MutationResponse! @verifyUser
  deleteCustomImage(id: ID!): MutationResponse! @verifyUser

  uploadFile(file: Upload!): FileUploadResponse!
}
